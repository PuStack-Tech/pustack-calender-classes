import 'package:flutter/material.dart';
import 'package:flutter_pustack/common/AppAssets.dart';
import 'package:flutter_pustack/common/app_colors.dart';
import 'package:flutter_pustack/widget/event_widget.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';

import 'calender_widget.dart';
import 'model/live_session/live_session_model.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  // Map
  Map<DateTime, LiveSessionModel?> _liveSessionModelList = {};

  /// Current date and time
  DateTime _currentTime = DateTime.now();

  /// Use for Theme change (Dark and Light)
  bool _isLightTheme = true;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    /// Pass live data list in this function
    /// That generate map witch pass in CalenderWidget
    _generateCalendarList(LiveSessionModel().getList());
  }

  /*
  * _list is List<LiveSessionModel> list
  * This method convert list in map Map<DateTime, LiveSessionModel?>
  * witch use in Widget for display
  * */
  _generateCalendarList(List<LiveSessionModel> _list) {
    _liveSessionModelList.clear();
    if (_list.isEmpty) {
      _liveSessionModelList[DateTime(
        _currentTime.year,
        _currentTime.month,
        _currentTime.day,
        1,
      )] = null;
      _liveSessionModelList[DateTime(
        _currentTime.year,
        _currentTime.month,
        _currentTime.day,
        24,
      )] = null;
    }
    for (int i = 0; i < _list.length; i++) {
      var model = _list[i];
      if (i == 0 && model.startTime.hour - 1 > 1) {
        _liveSessionModelList[DateTime(
          model.startTime.year,
          model.startTime.month,
          model.startTime.day,
          1,
        )] = null;
      }
      if (model.startTime.minute == 00) {
        _liveSessionModelList[DateTime(
          model.startTime.year,
          model.startTime.month,
          model.startTime.day,
          (model.startTime.hour - 1),
        )] = null;
      } else
        _liveSessionModelList[DateTime(
          model.startTime.year,
          model.startTime.month,
          model.startTime.day,
          (model.startTime.hour),
          00,
        )] = null;
      _liveSessionModelList[model.startTime] = model;
      if (model.startTime.hour != 24)
        _liveSessionModelList[DateTime(
          model.startTime.year,
          model.startTime.month,
          model.startTime.day,
          (model.startTime.hour + 1),
        )] = null;
      if (i == _list.length - 1 && model.startTime.hour + 1 < 24) {
        _liveSessionModelList[DateTime(
          model.startTime.year,
          model.startTime.month,
          model.startTime.day,
          24,
        )] = null;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: _isLightTheme
            ? AppColors.scaffoldLightColor
            : AppColors.scaffoldDarkColor,
        body: Container(
          child: Stack(
            children: [
              /// Background Color
              Row(
                children: [
                  Expanded(
                    flex: 1,
                    child: Container(
                      color: _isLightTheme
                          ? AppColors.calenderHoursLightBG
                          : AppColors.calenderHoursDarkBG,
                    ),
                  ),
                  Expanded(flex: 5, child: SizedBox.shrink()),
                ],
              ),
              Positioned(
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    SizedBox(
                      height: 20,
                    ),

                    /// Top appbar and welcome card
                    _topCardAppBarWidget(),

                    /// Hourly calender timeline
                    /// 'liveSessionModelList' is map that generated by using _generateCalendarList() method
                    Flexible(
                      child: CalenderWidget(
                        list: _liveSessionModelList,
                        isLightTheme: _isLightTheme,
                        displayCurrentTimeline: true,
                        eventDateWidget: (context, date, model) {
                          return Expanded(
                            flex: 1,
                            child: Container(
                              margin: EdgeInsets.symmetric(
                                horizontal: 10,
                              ),
                              child: RichText(
                                textAlign: TextAlign.start,
                                text: TextSpan(
                                    style: TextStyle(
                                      color: AppColors.gryTextColor,
                                      fontFamily:
                                          GoogleFonts.poppins().fontFamily,
                                    ),
                                    children: [
                                      TextSpan(
                                        text:
                                            "${DateFormat(model != null ? "h:mm" : "h a").format(date)}",
                                        style: TextStyle(
                                            fontFamily: GoogleFonts.poppins()
                                                .fontFamily,
                                            color: model != null
                                                ? (_isLightTheme
                                                    ? AppColors.black
                                                    : AppColors.white)
                                                : null,
                                            fontSize: model != null ? 16 : 14),
                                      ),
                                      if (model != null)
                                        TextSpan(
                                          text:
                                              "${DateFormat("\na").format(date)}",
                                          style: TextStyle(fontSize: 14),
                                        )
                                    ]),
                              ),
                            ),
                          );
                        },
                        eventCartWidget: (context, date, model) {
                          /// Return EventWidget or Divider
                          return Expanded(
                            flex: 5,
                            child: model != null
                                ? EventWidget(model,
                                    isLightTheme: _isLightTheme)
                                : Divider(
                                    color: _isLightTheme
                                        ? AppColors.calenderHoursLightBG
                                        : AppColors.calenderHoursLightBG
                                            .withOpacity(0.05),
                                    thickness: 2,
                                  ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _userProfile({String? image}) {
    return Container(
      height: 30,
      width: 30,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        image: DecorationImage(
          image: Image.asset(
            image!,
            fit: BoxFit.cover,
          ).image,
          fit: BoxFit.cover,
        ),
        border: Border.all(
          color: _isLightTheme ? AppColors.white : AppColors.scaffoldDarkColor,
        ),
      ),
    );
  }

  Widget _topCardAppBarWidget() {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          flex: 1,
          child: Container(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  DateFormat("MMM").format(_currentTime).toUpperCase(),
                  style: TextStyle(
                    color: AppColors.gryTextColor,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(
                  height: 5,
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _isLightTheme = !_isLightTheme;
                    });
                  },
                  child: CircleAvatar(
                    backgroundColor:
                        _isLightTheme ? AppColors.circleBG : AppColors.white,
                    foregroundColor: AppColors.transparent,
                    child: Text(
                      DateFormat("dd").format(_currentTime),
                      style: TextStyle(
                        color:
                            _isLightTheme ? AppColors.white : AppColors.black,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
        Expanded(
          flex: 5,
          child: Container(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  width: double.infinity,
                  padding: EdgeInsets.symmetric(horizontal: 10),
                  child: Row(
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      Expanded(
                        child: Container(
                          child: Stack(
                            children: [
                              Positioned(
                                child: Text(
                                  "IIT JEE",
                                  style: TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                    color: _isLightTheme
                                        ? AppColors.black
                                        : AppColors.white,
                                  ),
                                ),
                              ),
                              Positioned(
                                right: 1,
                                child: _userProfile(image: AppAssets.user3),
                              ),
                              Positioned(
                                right: 20,
                                child: _userProfile(image: AppAssets.user2),
                              ),
                              Positioned(
                                right: 40,
                                child: _userProfile(image: AppAssets.user4),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Icon(
                        Icons.arrow_forward_ios_rounded,
                        size: 16,
                        color:
                            _isLightTheme ? AppColors.black : AppColors.white,
                      )
                    ],
                  ),
                ),
                SizedBox(
                  height: 10,
                ),
                Container(
                  height: 100,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    image: DecorationImage(
                      image: Image.asset(
                        _isLightTheme
                            ? AppAssets.dayCalenderBg
                            : AppAssets.nightCalenderBg,
                        fit: BoxFit.cover,
                      ).image,
                      fit: BoxFit.cover,
                    ),
                  ),
                  child: Container(
                    color: AppColors.black.withOpacity(0.3),
                    padding: EdgeInsets.only(left: 30),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          // "Good ${currentTime.hour >= 16 ? "evening" : "morning"}, Ravi",
                          "Good ${!_isLightTheme ? "evening" : "morning"}, Ravi",
                          style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: _isLightTheme
                                  ? AppColors.black
                                  : AppColors.white,
                              fontSize: 16),
                        ),
                        SizedBox(
                          height: 5,
                        ),
                        Text(
                          "You have ${LiveSessionModel().getList().length} classes today",
                          style: TextStyle(
                              color: _isLightTheme
                                  ? AppColors.black
                                  : AppColors.white,
                              fontSize: 13),
                        ),
                      ],
                    ),
                  ),
                )
              ],
            ),
          ),
        ),
      ],
    );
  }
}
