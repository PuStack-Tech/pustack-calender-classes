import 'package:flutter/material.dart';
import 'package:flutter_pustack/common/app_colors.dart';
import 'package:flutter_pustack/widget/event_widget.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';

import 'calender_widget.dart';
import 'model/live_session/live_session_model.dart';
import 'services/live_session_service.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  // Map
  Map<DateTime, LiveSessionModel?> _liveSessionModelList = {};

  /// Current date and time
  DateTime _currentTime = DateTime.now();

  /// Use for Theme change (Dark and Light)
  bool _isLightTheme = true;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    /// Pass live data list in this function
    /// That generate map witch pass in CalenderWidget
    _liveSessionModelList =
        LiveSessionService().generateCalendarList(LiveSessionModel().getList());
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: _isLightTheme
            ? AppColors.scaffoldLightColor
            : AppColors.scaffoldDarkColor,
        body: Container(
          child: Stack(
            children: [
              /// Background Color
              Row(
                children: [
                  Expanded(
                    flex: 1,
                    child: Container(
                      color: _isLightTheme
                          ? AppColors.calenderHoursLightBG
                          : AppColors.calenderHoursDarkBG,
                    ),
                  ),
                  Expanded(flex: 5, child: SizedBox.shrink()),
                ],
              ),
              Positioned(
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    SizedBox(
                      height: 20,
                    ),

                    /// Hourly calender timeline
                    /// 'liveSessionModelList' is map that generated by using _generateCalendarList() method
                    Flexible(
                      child: CalenderWidget(
                        list: _liveSessionModelList,
                        isLightTheme: _isLightTheme,
                        displayCurrentTimeline: true,
                        eventDateWidget: (context, date, model) {
                          return Expanded(
                            flex: 1,
                            child: Container(
                              margin: EdgeInsets.symmetric(
                                horizontal: 10,
                              ),
                              child: RichText(
                                textAlign: TextAlign.start,
                                text: TextSpan(
                                    style: TextStyle(
                                      color: AppColors.gryTextColor,
                                      fontFamily:
                                          GoogleFonts.poppins().fontFamily,
                                    ),
                                    children: [
                                      TextSpan(
                                        text:
                                            "${DateFormat(model != null ? "h:mm" : "h a").format(date)}",
                                        style: TextStyle(
                                            fontFamily: GoogleFonts.poppins()
                                                .fontFamily,
                                            color: model != null
                                                ? (_isLightTheme
                                                    ? AppColors.black
                                                    : AppColors.white)
                                                : null,
                                            fontSize: model != null ? 16 : 14),
                                      ),
                                      if (model != null)
                                        TextSpan(
                                          text:
                                              "${DateFormat("\na").format(date)}",
                                          style: TextStyle(fontSize: 14),
                                        )
                                    ]),
                              ),
                            ),
                          );
                        },
                        eventCartWidget: (context, date, model) {
                          /// Return EventWidget or Divider
                          return Expanded(
                            flex: 5,
                            child: model != null
                                ? EventWidget(model,
                                    isLightTheme: _isLightTheme)
                                : Divider(
                                    color: _isLightTheme
                                        ? AppColors.calenderHoursLightBG
                                        : AppColors.calenderHoursLightBG
                                            .withOpacity(0.05),
                                    thickness: 2,
                                  ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
